from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import TOKEN

STEPS = {
    "–ö–æ–Ω—Ü–µ—Ä—Ç üé§": [
        "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –∫ –º–∏–∫—à–µ—Ä—É.",
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä: —É—Å–∏–ª–∏—Ç–µ –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–±–∞—Å) –∏ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–≥–æ–ª–æ—Å).",
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫.",
        "4. –í–∫–ª—é—á–∏—Ç–µ —Å—Ü–µ–Ω–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.",
    ],
    "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ üé≠": [
        "1. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –ø–µ—Ç–ª–∏—á–Ω—ã–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –Ω–∞ –∞–∫—Ç—ë—Ä–∞—Ö.",
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–≥–æ–ª–æ—Å).",
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫.",
        "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã –∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.",
    ],
    "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üéôÔ∏è": [
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –ø–µ—Ä–µ–¥ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞–º–∏.",
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã (—á—ë—Ç–∫–æ—Å—Ç—å —Ä–µ—á–∏).",
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫.",
        "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç–æ—Ä –∫ –Ω–æ—É—Ç–±—É–∫—É.",
    ],
}

async def start(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [["–ö–æ–Ω—Ü–µ—Ä—Ç üé§", "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ üé≠"], ["–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üéôÔ∏è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=reply_markup,
    )

async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.message.from_user.id

    if text in STEPS:
        context.user_data[user_id] = {
            "event_type": text,
            "current_step": 0,
        }
        await send_step(update, context, user_id)

    elif text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        user_data = context.user_data.get(user_id)
        if user_data:
            current_step = user_data["current_step"]
            event_type = user_data["event_type"]
            steps = STEPS[event_type]

            if current_step < len(steps) - 1:
                user_data["current_step"] += 1
                await send_step(update, context, user_id)
            else:
                await update.message.reply_text("–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É.")
                await start(update, context)

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üè†":
        await start(update, context)

async def send_step(update: Update, context: CallbackContext, user_id: int):
    user_data = context.user_data.get(user_id)
    if user_data:
        event_type = user_data["event_type"]
        current_step = user_data["current_step"]
        steps = STEPS[event_type]

        await update.message.reply_text(steps[current_step])

        keyboard = [["‚úÖ –ì–æ—Ç–æ–≤–æ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üè†"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∏–ª–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üè†', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
            reply_markup=reply_markup,
        )

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()